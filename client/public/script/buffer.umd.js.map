{"version":3,"file":"index.umd.js","sources":["../node_modules/Buffer/index.js"],"sourcesContent":["if ('undefined' === typeof Buffer) {\n  // implicit global\n  Buffer = undefined;\n}\n\n(function () {\n  \"use strict\";\n\n  function createBuffer() {\n    return Array;\n\n    /*\n    function Buffer(sizeOrArrayOrString, encoding) {\n      var size, arr, str;\n\n      if ('number' === typeof sizeOrArrayOrString) {\n        size = sizeOrArrayOrString;\n      } else if ('string' === typeof sizeOrArrayOrString) {\n        // TODO handle encoding\n        str = String(sizeOrArrayOrString);\n        arr = arr.split('');\n        size = arr.length;\n      } else {\n        arr = sizeOrArrayOrString;\n        size = arr.length;\n      }\n\n      this.length = size;\n    }\n\n    Buffer.prototype = new Array();\n    delete Buffer.prototype.push;\n    delete Buffer.prototype.pop;\n    delete Buffer.prototype.shift;\n    delete Buffer.prototype.unshift;\n    delete Buffer.prototype.splice;\n\n    Buffer.isBuffer = function (buf) {\n      return buf instanceof Buffer;\n    };\n\n    // TODO\n    Buffer.byteLength = function (string, encoding) {\n      console.log('[todo] byteLength');\n      encoding = encoding || 'utf8';\n      // return string.length;\n    };\n\n    // TODO\n    Buffer.prototype.write = function (string, offset, encoding) {\n      console.log('[todo] write');\n    };\n\n    Buffer.prototype.toString = function (encoding, start, end) {\n      var res = {}\n        , i\n        ;\n\n      start = start || 0;\n      end = end || this.length - 1;\n      res.length = end + 1;\n\n      if (this.length === res.length) {\n        res = this;\n      } else {\n        i = 0;\n        while (start <= end) {\n          res[i] = this[start];\n          i += 1;\n          start += 1;\n        }\n      }\n\n      return JSON.stringify(res);\n    };\n\n    Buffer.prototype.copy = function (targetBuffer, targetStart, sourceStart, sourceEnd) {\n      targetStart = targetStart || 0;\n      sourceStart = sourceStart || 0;\n      sourceEnd = sourceEnd || targetBuffer.length;\n\n    };\n\n    Buffer.prototype.slice = function (start, end) {\n      end = end || this.length;\n      this.slice(start, end);\n    }\n\n    return Buffer;\n    */\n  }\n\n  if ('undefined' === typeof Buffer) {\n    Buffer = createBuffer();\n  }\n\n  module.exports = Buffer;\n}());\n"],"names":["Buffer","undefined","Array","module","exports"],"mappings":"+RAAI,oBAAuBA,SAEzBA,YAASC,GA0FL,oBAAuBD,SACzBA,OApFOE,OAuFTC,EAAAC,QAAiBJ"}